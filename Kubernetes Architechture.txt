Kubernetes Architechture:

A Kubernetes cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node.

Control Plane Components:

The control plane's components make global decisions about the cluster (for example, scheduling), as well as detecting and responding to cluster events (for example, starting up a new pod when a deployment's replicas field is unsatisfied).

kube-apiserver:

	The API server is a component of the Kubernetes control plane that exposes the Kubernetes API. The API server is the front end for the Kubernetes control plane.

	The main implementation of a Kubernetes API server is kube-apiserver. kube-apiserver is designed to scale horizontallyâ€”that is, it scales by deploying more instances. You can run several instances of kube-apiserver and balance traffic between those instances.

ETCD:

	Consistent and highly-available key value store used as Kubernetes' backing store for all cluster data.

	If your Kubernetes cluster uses etcd as its backing store, make sure you have a back up plan for those data.



kube-scheduler:

	Control plane component that watches for newly created Pods with no assigned node, and selects a node for them to run on.

	Factors taken into account for scheduling decisions include: individual and collective resource requirements, hardware/software/policy constraints, affinity and anti-affinity specifications, data locality, inter-workload interference, and deadlines.



kube-controller-manager:

	Control Plane component that runs controller processes.

	Logically, each controller is a separate process, but to reduce complexity, they are all compiled into a single binary and run in a single process.

	These controllers include:

	1.Node controller: 
	
	Responsible for noticing and responding when nodes go down.
	
	2.Replication controller: 
	
	Responsible for maintaining the correct number of pods 
	for every replication controller object in the system.
	
	3.Endpoints controller: 
	
	Populates the Endpoints object (that is, joins Services & Pods).

	4.Service Account & Token controllers:

	Create default accounts and API access tokens for new namespaces.


cloud-controller-manager:

	A Kubernetes control plane component that embeds cloud-specific control logic. The cloud controller manager lets you link your cluster into your cloud provider's API, and separates out the components that interact with that cloud platform from components that just interact with your cluster


	The following controllers can have cloud provider dependencies:

	1.Node controller: 
	
	For checking the cloud provider to determine if a node has been deleted in the cloud after it stops responding
	
	2.Route controller: 
	
	For setting up routes in the underlying cloud infrastructure
	
	3.Service controller: 
	
	For creating, updating and deleting cloud provider load balancers.



Node Components:

Node components run on every node, maintaining running pods and providing the Kubernetes runtime environment.


kubelet:

	An agent that runs on each node in the cluster. It makes sure that containers are running in a Pod.

	The kubelet takes a set of PodSpecs that are provided through various mechanisms and ensures that the containers described in those PodSpecs are running and healthy. The kubelet doesn't manage containers which were not created by Kubernetes.

kube-proxy:

	kube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept.

	kube-proxy maintains network rules on nodes. These network rules allow network communication to your Pods from network sessions inside or outside of your cluster.


Container runtime:

	The container runtime is the software that is responsible for running containers.

	Kubernetes supports several container runtimes: Docker, containerd, CRI-O